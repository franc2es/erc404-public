{
  "address": "0x7EaDA505E82AdcD059D26eA726Ff003152c3F805",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "buyFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subTokenId_",
          "type": "uint256"
        }
      ],
      "name": "buyNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "buySBT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seasonId_",
          "type": "uint256"
        }
      ],
      "name": "claimSBTIncome",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "distributeSBTIncome",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getCurrentSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "sbtPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ftPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ftSwapAmount_",
          "type": "uint256"
        }
      ],
      "name": "launch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "sbtStatus",
      "outputs": [
        {
          "internalType": "enum SBTStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subTokenId_",
          "type": "uint256"
        }
      ],
      "name": "swapToFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subTokenId_",
          "type": "uint256"
        }
      ],
      "name": "swapToNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "updateMeta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "useSBT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokenValut",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3156e5c51a36ec9c0198db2a8a82bad40389a4da4adc5db21a1ea2dafd0c96cf",
  "receipt": {
    "to": null,
    "from": "0xC6E58fb4aFFB6aB8A392b7CC23CD3feF74517F6C",
    "contractAddress": "0x7EaDA505E82AdcD059D26eA726Ff003152c3F805",
    "transactionIndex": 1,
    "gasUsed": "2630699",
    "logsBloom": "0x
    "blockHash": "0x17cc5f47686930e9631008ab5c77a78dda58b6938b6252b7312962aa5eb94024",
    "transactionHash": "0x3156e5c51a36ec9c0198db2a8a82bad40389a4da4adc5db21a1ea2dafd0c96cf",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4329032,
        "transactionHash": "0x3156e5c51a36ec9c0198db2a8a82bad40389a4da4adc5db21a1ea2dafd0c96cf",
        "address": "0x7EaDA505E82AdcD059D26eA726Ff003152c3F805",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c6e58fb4affb6ab8a392b7cc23cd3fef74517f6c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x17cc5f47686930e9631008ab5c77a78dda58b6938b6252b7312962aa5eb94024"
      }
    ],
    "blockNumber": 4329032,
    "cumulativeGasUsed": "2665876",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0e85f0f98392a142b9b24e1e14edcefb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"buyFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subTokenId_\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"buySBT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seasonId_\",\"type\":\"uint256\"}],\"name\":\"claimSBTIncome\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"distributeSBTIncome\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getCurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"sbtPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ftPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ftSwapAmount_\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"sbtStatus\",\"outputs\":[{\"internalType\":\"enum SBTStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subTokenId_\",\"type\":\"uint256\"}],\"name\":\"swapToFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subTokenId_\",\"type\":\"uint256\"}],\"name\":\"swapToNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"updateMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"useSBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenValut\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC404_Movie.sol\":\"ERC404_Movie\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xcdafc421d9de3c739fbc332ba62afebf617e1becaecf598b77420ba0d6709f85\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC404_Movie.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nstruct Token {\\n\\tstring name;\\n\\tuint256 sbtPrice;\\n\\tuint256 ftPrice;\\n\\tuint256 ftSwapAmount;\\n\\taddress owner;\\n}\\n\\nenum SBTStatus {\\n\\tNONE,\\n\\tPAID,\\n\\tUSED\\n}\\n\\ncontract ERC404_Movie is ERC1155Pausable, Ownable {\\n\\tuint256 private _nextTokenId = 1;\\n\\n\\tmapping(uint256 => Token) _tokenMap;\\n\\n\\tmapping(uint256 => mapping(address => SBTStatus)) _sbtStatusMap;\\n\\n\\tmapping(uint256 => uint256) _tokenSBTVault;\\n\\tmapping(uint256 => uint256) _tokenVault;\\n\\tmapping(uint256 => uint256) _tokenFTAmount;\\n\\tmapping(uint256 => uint256) _tokenNFTAmount;\\n\\tmapping(uint256 => mapping(uint256 => address)) _tokenNFTOwnerMap;\\n\\tmapping(uint256 => mapping(address => uint256[])) _tokenNFTOwnedMap;\\n\\n\\tconstructor() ERC1155(\\\"https://erc404-movie.com/api/token/\\\") Ownable() {}\\n\\n\\tfunction updateMeta(string memory uri_) public onlyOwner {\\n\\t\\t_setURI(uri_);\\n\\t}\\n\\n\\tfunction pause() public onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() public onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction launch(\\n\\t\\tstring memory name_,\\n\\t\\tuint256 sbtPrice_,\\n\\t\\tuint256 ftPrice_,\\n\\t\\tuint256 ftSwapAmount_\\n\\t) public returns (uint256) {\\n\\t\\t// TODO: use pay token to launch new token?\\n\\t\\tuint256 tokenId = _nextTokenId++;\\n\\t\\t_tokenMap[tokenId] = Token(\\n\\t\\t\\tname_,\\n\\t\\t\\tsbtPrice_,\\n\\t\\t\\tftPrice_,\\n\\t\\t\\tftSwapAmount_,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\n\\t\\treturn tokenId;\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\tmodifier tokenHasLaunched(uint256 tokenId_) {\\n\\t\\trequire(tokenId_ < _nextTokenId, \\\"tokenId not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction buySBT(\\n\\t\\tuint256 tokenId_\\n\\t) public payable tokenHasLaunched(tokenId_) {\\n\\t\\tToken memory token = _tokenMap[tokenId_];\\n\\t\\trequire(msg.value >= token.sbtPrice, \\\"payment not enough\\\");\\n\\t\\trequire(\\n\\t\\t\\t_sbtStatusMap[tokenId_][msg.sender] == SBTStatus.NONE,\\n\\t\\t\\t\\\"You have buy the SBT\\\"\\n\\t\\t);\\n\\t\\t_sbtStatusMap[tokenId_][msg.sender] = SBTStatus.PAID;\\n\\t\\t_tokenSBTVault[tokenId_] += msg.value;\\n\\t}\\n\\n\\tfunction sbtStatus(\\n\\t\\tuint256 tokenId_,\\n\\t\\taddress user\\n\\t) public view returns (SBTStatus) {\\n\\t\\treturn _sbtStatusMap[tokenId_][user];\\n\\t}\\n\\n\\tfunction useSBT(uint256 tokenId_) public {\\n\\t\\trequire(\\n\\t\\t\\t_sbtStatusMap[tokenId_][msg.sender] == SBTStatus.PAID,\\n\\t\\t\\t\\\"Your SBT is not in PAID status\\\"\\n\\t\\t);\\n\\t\\t_sbtStatusMap[tokenId_][msg.sender] = SBTStatus.USED;\\n\\t}\\n\\n\\tfunction getCurrentSupply(uint256 tokenId_) public view returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t_tokenFTAmount[tokenId_] +\\n\\t\\t\\t_tokenNFTAmount[tokenId_] *\\n\\t\\t\\t_tokenMap[tokenId_].ftSwapAmount;\\n\\t}\\n\\n\\tfunction _checkBeforeMint(\\n\\t\\tuint256 tokenId_,\\n\\t\\tuint256 userPayment_,\\n\\t\\tuint256 ftAmount_,\\n\\t\\tuint256 nftAmount_\\n\\t) internal view {\\n\\t\\tToken memory token = _tokenMap[tokenId_];\\n\\t\\tuint256 requiredPayment = token.ftPrice *\\n\\t\\t\\tftAmount_ +\\n\\t\\t\\ttoken.ftSwapAmount *\\n\\t\\t\\t10000 *\\n\\t\\t\\tnftAmount_;\\n\\t\\trequire(userPayment_ >= requiredPayment, \\\"payment not enough\\\");\\n\\n\\t\\tuint256 maxSupplyAmount = token.ftSwapAmount * 10000;\\n\\t\\tuint256 currentSupply = getCurrentSupply(tokenId_);\\n\\t\\tuint256 newSupplyAmount = currentSupply +\\n\\t\\t\\tftAmount_ +\\n\\t\\t\\tnftAmount_ *\\n\\t\\t\\t10000;\\n\\t\\trequire(newSupplyAmount <= maxSupplyAmount, \\\"exceed max supply amount\\\");\\n\\t}\\n\\n\\tfunction buyFT(\\n\\t\\tuint256 tokenId_,\\n\\t\\tuint256 amount_\\n\\t) public payable tokenHasLaunched(tokenId_) {\\n\\t\\t_checkBeforeMint(tokenId_, msg.value, amount_, 0);\\n\\n\\t\\t_mint(msg.sender, tokenId_, amount_, \\\"\\\");\\n\\t\\t_tokenFTAmount[tokenId_] += amount_;\\n\\t\\t_tokenVault[tokenId_] += msg.value;\\n\\t}\\n\\n\\tfunction buyNFT(\\n\\t\\tuint256 tokenId_,\\n\\t\\tuint256 subTokenId_\\n\\t) public payable tokenHasLaunched(tokenId_) {\\n\\t\\trequire(\\n\\t\\t\\t_tokenNFTOwnerMap[tokenId_][subTokenId_] == address(0),\\n\\t\\t\\t\\\"Token already have owner\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tsubTokenId_ > 0 && subTokenId_ <= 10000,\\n\\t\\t\\t\\\"sub tokenId should between 1 and 10000\\\"\\n\\t\\t);\\n\\t\\t_checkBeforeMint(tokenId_, msg.value, 0, 1);\\n\\n\\t\\t_tokenNFTOwnerMap[tokenId_][subTokenId_] = msg.sender;\\n\\t\\t_tokenNFTOwnedMap[tokenId_][msg.sender].push(subTokenId_);\\n\\t\\t_tokenNFTAmount[tokenId_] += 1;\\n\\t\\t_tokenVault[tokenId_] += msg.value;\\n\\t}\\n\\n\\tfunction swapToFT(uint256 tokenId_, uint256 subTokenId_) public {\\n\\t\\trequire(\\n\\t\\t\\t_tokenNFTOwnerMap[tokenId_][subTokenId_] == msg.sender,\\n\\t\\t\\t\\\"You are not the owner\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 amount = _tokenMap[tokenId_].ftSwapAmount;\\n\\t\\t_mint(msg.sender, tokenId_, amount, \\\"\\\");\\n\\t\\t_tokenFTAmount[tokenId_] += amount;\\n\\t\\t_tokenNFTOwnerMap[tokenId_][subTokenId_] = address(0);\\n\\t\\t_tokenNFTAmount[tokenId_] -= 1;\\n\\n\\t\\t// remove ownership from msg.sender\\n\\t\\tuint256 len = _tokenNFTOwnedMap[tokenId_][msg.sender].length;\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\tif (_tokenNFTOwnedMap[tokenId_][msg.sender][i] != subTokenId_) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tif (i != len - 1) {\\n\\t\\t\\t\\t_tokenNFTOwnedMap[tokenId_][msg.sender][i] = _tokenNFTOwnedMap[\\n\\t\\t\\t\\t\\ttokenId_\\n\\t\\t\\t\\t][msg.sender][len - 1];\\n\\t\\t\\t}\\n\\t\\t\\t_tokenNFTOwnedMap[tokenId_][msg.sender].pop();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction swapToNFT(uint256 tokenId_, uint256 subTokenId_) public {\\n\\t\\trequire(\\n\\t\\t\\t_tokenNFTOwnerMap[tokenId_][subTokenId_] == address(0),\\n\\t\\t\\t\\\"Token already have owner\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tbalanceOf(msg.sender, tokenId_) >= _tokenMap[tokenId_].ftSwapAmount,\\n\\t\\t\\t\\\"You do not have enough FT\\\"\\n\\t\\t);\\n\\n\\t\\t_burn(msg.sender, tokenId_, _tokenMap[tokenId_].ftSwapAmount);\\n\\t\\t_tokenNFTOwnerMap[tokenId_][subTokenId_] = msg.sender;\\n\\t\\t_tokenNFTOwnedMap[tokenId_][msg.sender].push(subTokenId_);\\n\\t\\t_tokenNFTAmount[tokenId_] += 1;\\n\\t}\\n\\n\\tfunction distributeSBTIncome(uint256 tokenId_) public view {\\n\\t\\trequire(_tokenSBTVault[tokenId_] > 0, \\\"SBT Value is zero\\\");\\n\\t\\trequire(\\n\\t\\t\\t_tokenMap[tokenId_].owner == msg.sender,\\n\\t\\t\\t\\\"Your are not the token owner\\\"\\n\\t\\t);\\n\\t\\t// TBD\\n\\t}\\n\\n\\tfunction claimSBTIncome(uint256 tokenId_, uint256 seasonId_) public view {\\n\\t\\trequire(\\n\\t\\t\\t_tokenNFTOwnedMap[tokenId_][msg.sender].length > 0,\\n\\t\\t\\t\\\"You do not have NFT\\\"\\n\\t\\t);\\n\\t\\trequire(seasonId_ != 0, \\\"Just remove compile error\\\");\\n\\t\\t// TBD\\n\\t}\\n\\n\\tfunction withdrawTokenValut(uint256 tokenId_) public view {\\n\\t\\trequire(\\n\\t\\t\\t_tokenMap[tokenId_].owner == msg.sender,\\n\\t\\t\\t\\\"Your are not the token owner\\\"\\n\\t\\t);\\n\\t\\t// TBD\\n\\t}\\n}\\n\",\"keccak256\":\"0x55754c0d2fbd7eb93027f6d68dd496fc07e2519790bea81685a8333ada3911ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016004553480156200001657600080fd5b5060405180606001604052806023815260200162002eac602391396200003c8162000058565b506003805460ff1916905562000052336200006a565b62000235565b600262000066828262000169565b5050565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000ef57607f821691505b6020821081036200011057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200016457600081815260208120601f850160051c810160208610156200013f5750805b601f850160051c820191505b8181101562000160578281556001016200014b565b5050505b505050565b81516001600160401b03811115620001855762000185620000c4565b6200019d81620001968454620000da565b8462000116565b602080601f831160018114620001d55760008415620001bc5750858301515b600019600386901b1c1916600185901b17855562000160565b600085815260208120601f198616915b828110156200020657888601518255948401946001909101908401620001e5565b5085821015620002255787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612c6780620002456000396000f3fe60806040526004361061019f5760003560e01c80635c975abb116100ec578063a25d198d1161008a578063e985e9c511610064578063e985e9c5146104c3578063f242432a1461050c578063f2fde38b1461052c578063f5068c931461054c57600080fd5b8063a25d198d14610463578063abf1b36914610483578063ce5170ca146104a357600080fd5b80637bff2fbe116100c65780637bff2fbe146103e55780638456cb59146103f85780638da5cb5b1461040d578063a22cb4651461044357600080fd5b80635c975abb146103655780635e08f3621461037d578063715018a6146103d057600080fd5b80632d3dddf11161015957806346f5303d1161013357806346f5303d146102d8578063494b09f7146102f85780634e1273f4146103185780635a9524c51461034557600080fd5b80632d3dddf1146102835780632eb2c2d6146102a35780633f4ba83a146102c357600080fd5b8062fdd58e146101ab57806301ffc9a7146101de5780630e89341c1461020e5780631c89ee451461023b5780631cf0e62c1461025d5780631d85bf031461027057600080fd5b366101a657005b600080fd5b3480156101b757600080fd5b506101cb6101c6366004612188565b61056c565b6040519081526020015b60405180910390f35b3480156101ea57600080fd5b506101fe6101f93660046121c8565b610605565b60405190151581526020016101d5565b34801561021a57600080fd5b5061022e6102293660046121ec565b610655565b6040516101d5919061224b565b34801561024757600080fd5b5061025b6102563660046121ec565b6106e9565b005b61025b61026b3660046121ec565b6107a4565b61025b61027e36600461225e565b6109a9565b34801561028f57600080fd5b5061025b61029e3660046121ec565b610b40565b3480156102af57600080fd5b5061025b6102be3660046123cc565b610be3565b3480156102cf57600080fd5b5061025b610c2f565b3480156102e457600080fd5b506101cb6102f33660046121ec565b610c41565b34801561030457600080fd5b5061025b6103133660046121ec565b610738565b34801561032457600080fd5b50610338610333366004612476565b610c81565b6040516101d5919061257c565b34801561035157600080fd5b5061025b61036036600461258f565b610dab565b34801561037157600080fd5b5060035460ff166101fe565b34801561038957600080fd5b506103c36103983660046125cc565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6040516101d5919061260e565b3480156103dc57600080fd5b5061025b610dbc565b61025b6103f336600461225e565b610dce565b34801561040457600080fd5b5061025b610e36565b34801561041957600080fd5b5060035461010090046001600160a01b03166040516001600160a01b0390911681526020016101d5565b34801561044f57600080fd5b5061025b61045e366004612636565b610e46565b34801561046f57600080fd5b5061025b61047e36600461225e565b610e55565b34801561048f57600080fd5b5061025b61049e36600461225e565b611090565b3480156104af57600080fd5b506101cb6104be366004612672565b6111f9565b3480156104cf57600080fd5b506101fe6104de3660046126c6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561051857600080fd5b5061025b6105273660046126f0565b6112aa565b34801561053857600080fd5b5061025b610547366004612755565b6112ef565b34801561055857600080fd5b5061025b61056736600461225e565b611365565b60006001600160a01b0383166105dc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061063657506001600160e01b031982166303a24d0760e21b145b806105ff57506301ffc9a760e01b6001600160e01b03198316146105ff565b60606002805461066490612770565b80601f016020809104026020016040519081016040528092919081815260200182805461069090612770565b80156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b50505050509050919050565b6000818152600760205260409020546107385760405162461bcd60e51b81526020600482015260116024820152705342542056616c7565206973207a65726f60781b60448201526064016105d3565b6000818152600560205260409020600401546001600160a01b031633146107a15760405162461bcd60e51b815260206004820152601c60248201527f596f757220617265206e6f742074686520746f6b656e206f776e65720000000060448201526064016105d3565b50565b8060045481106107c65760405162461bcd60e51b81526004016105d3906127aa565b600082815260056020526040808220815160a081019092528054829082906107ed90612770565b80601f016020809104026020016040519081016040528092919081815260200182805461081990612770565b80156108665780601f1061083b57610100808354040283529160200191610866565b820191906000526020600020905b81548152906001019060200180831161084957829003601f168201915b5050509183525050600182015460208083019190915260028301546040830152600383015460608301526004909201546001600160a01b03166080909101528101519091503410156108ef5760405162461bcd60e51b81526020600482015260126024820152710e0c2f2dacadce840dcdee840cadcdeeaced60731b60448201526064016105d3565b600083815260066020908152604080832033845290915281205460ff16600281111561091d5761091d6125f8565b146109615760405162461bcd60e51b8152602060048201526014602482015273165bdd481a185d9948189d5e481d1a194814d09560621b60448201526064016105d3565b60008381526006602090815260408083203384528252808320805460ff1916600117905585835260079091528120805434929061099f9084906127eb565b9091555050505050565b8160045481106109cb5760405162461bcd60e51b81526004016105d3906127aa565b6000838152600b602090815260408083208584529091529020546001600160a01b031615610a365760405162461bcd60e51b81526020600482015260186024820152772a37b5b2b71030b63932b0b23c903430bb329037bbb732b960411b60448201526064016105d3565b600082118015610a4857506127108211155b610aa35760405162461bcd60e51b815260206004820152602660248201527f73756220746f6b656e49642073686f756c64206265747765656e203120616e6460448201526502031303030360d41b60648201526084016105d3565b610ab1833460006001611411565b6000838152600b60209081526040808320858452825280832080546001600160a01b03191633908117909155868452600c8352818420908452825280832080546001818101835591855283852001869055868452600a9092528220805491929091610b1d9084906127eb565b90915550506000838152600860205260408120805434929061099f9084906127eb565b6001600082815260066020908152604080832033845290915290205460ff166002811115610b7057610b706125f8565b14610bbd5760405162461bcd60e51b815260206004820152601e60248201527f596f757220534254206973206e6f7420696e205041494420737461747573000060448201526064016105d3565b60009081526006602090815260408083203384529091529020805460ff19166002179055565b6001600160a01b038516331480610bff5750610bff85336104de565b610c1b5760405162461bcd60e51b81526004016105d3906127fe565b610c288585858585611614565b5050505050565b610c376117ff565b610c3f61185f565b565b600081815260056020908152604080832060030154600a909252822054610c68919061284c565b6000838152600960205260409020546105ff91906127eb565b60608151835114610ce65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105d3565b6000835167ffffffffffffffff811115610d0257610d02612280565b604051908082528060200260200182016040528015610d2b578160200160208202803683370190505b50905060005b8451811015610da357610d76858281518110610d4f57610d4f612863565b6020026020010151858381518110610d6957610d69612863565b602002602001015161056c565b828281518110610d8857610d88612863565b6020908102919091010152610d9c81612879565b9050610d31565b509392505050565b610db36117ff565b6107a1816118b1565b610dc46117ff565b610c3f60006118bd565b816004548110610df05760405162461bcd60e51b81526004016105d3906127aa565b610dfd8334846000611411565b610e1833848460405180602001604052806000815250611917565b60008381526009602052604081208054849290610b1d9084906127eb565b610e3e6117ff565b610c3f611a3a565b610e51338383611a77565b5050565b6000828152600b602090815260408083208484529091529020546001600160a01b03163314610ebe5760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b60448201526064016105d3565b6000828152600560209081526040808320600301548151928301909152918152610eed90339085908490611917565b60008381526009602052604081208054839290610f0b9084906127eb565b90915550506000838152600b60209081526040808320858452825280832080546001600160a01b0319169055858352600a9091528120805460019290610f52908490612892565b90915550506000838152600c60209081526040808320338452909152812054905b81811015610c28576000858152600c602090815260408083203384529091529020805485919083908110610fa957610fa9612863565b90600052602060002001540361107e57610fc4600183612892565b811461103f576000858152600c602090815260408083203384529091529020610fee600184612892565b81548110610ffe57610ffe612863565b6000918252602080832090910154878352600c82526040808420338552909252912080548390811061103257611032612863565b6000918252602090912001555b6000858152600c602090815260408083203384529091529020805480611067576110676128a5565b600190038181906000526020600020016000905590555b8061108881612879565b915050610f73565b6000828152600b602090815260408083208484529091529020546001600160a01b0316156110fb5760405162461bcd60e51b81526020600482015260186024820152772a37b5b2b71030b63932b0b23c903430bb329037bbb732b960411b60448201526064016105d3565b600082815260056020526040902060030154611117338461056c565b10156111655760405162461bcd60e51b815260206004820152601960248201527f596f7520646f206e6f74206861766520656e6f7567682046540000000000000060448201526064016105d3565b6000828152600560205260409020600301546111849033908490611b57565b6000828152600b60209081526040808320848452825280832080546001600160a01b03191633908117909155858452600c8352818420908452825280832080546001818101835591855283852001859055858452600a90925282208054919290916111f09084906127eb565b90915550505050565b600480546000918291908261120d83612879565b909155506040805160a081018252888152602080820189905281830188905260608201879052336080830152600084815260059091529190912081519293509091819061125a9082612906565b50602082015160018201556040820151600282015560608201516003820155608090910151600490910180546001600160a01b0319166001600160a01b0390921691909117905595945050505050565b6001600160a01b0385163314806112c657506112c685336104de565b6112e25760405162461bcd60e51b81526004016105d3906127fe565b610c288585858585611ce7565b6112f76117ff565b6001600160a01b03811661135c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d3565b6107a1816118bd565b6000828152600c602090815260408083203384529091529020546113c15760405162461bcd60e51b8152602060048201526013602482015272165bdd48191bc81b9bdd081a185d9948139195606a1b60448201526064016105d3565b80600003610e515760405162461bcd60e51b815260206004820152601960248201527f4a7573742072656d6f766520636f6d70696c65206572726f720000000000000060448201526064016105d3565b600084815260056020526040808220815160a0810190925280548290829061143890612770565b80601f016020809104026020016040519081016040528092919081815260200182805461146490612770565b80156114b15780601f10611486576101008083540402835291602001916114b1565b820191906000526020600020905b81548152906001019060200180831161149457829003601f168201915b5050509183525050600182015460208201526002820154604082015260038201546060808301919091526004909201546001600160a01b031660809091015281015190915060009083906115079061271061284c565b611511919061284c565b848360400151611521919061284c565b61152b91906127eb565b9050808510156115725760405162461bcd60e51b81526020600482015260126024820152710e0c2f2dacadce840dcdee840cadcdeeaced60731b60448201526064016105d3565b60008260600151612710611586919061284c565b9050600061159388610c41565b905060006115a38661271061284c565b6115ad88846127eb565b6115b791906127eb565b9050828111156116095760405162461bcd60e51b815260206004820152601860248201527f657863656564206d617820737570706c7920616d6f756e74000000000000000060448201526064016105d3565b505050505050505050565b81518351146116765760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105d3565b6001600160a01b03841661169c5760405162461bcd60e51b81526004016105d3906129c6565b336116ab818787878787611e14565b60005b84518110156117915760008582815181106116cb576116cb612863565b6020026020010151905060008583815181106116e9576116e9612863565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156117395760405162461bcd60e51b81526004016105d390612a0b565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906117769084906127eb565b925050819055505050508061178a90612879565b90506116ae565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117e1929190612a55565b60405180910390a46117f7818787878787611e7c565b505050505050565b6003546001600160a01b03610100909104163314610c3f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b611867611fd7565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6002610e518282612906565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166119775760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105d3565b33600061198385612020565b9050600061199085612020565b90506119a183600089858589611e14565b6000868152602081815260408083206001600160a01b038b168452909152812080548792906119d19084906127eb565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611a318360008989898961206b565b50505050505050565b611a42612126565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118943390565b816001600160a01b0316836001600160a01b031603611aea5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105d3565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038316611bb95760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016105d3565b336000611bc584612020565b90506000611bd284612020565b9050611bf283876000858560405180602001604052806000815250611e14565b6000858152602081815260408083206001600160a01b038a16845290915290205484811015611c6f5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016105d3565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611a31565b6001600160a01b038416611d0d5760405162461bcd60e51b81526004016105d3906129c6565b336000611d1985612020565b90506000611d2685612020565b9050611d36838989858589611e14565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015611d775760405162461bcd60e51b81526004016105d390612a0b565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611db49084906127eb565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611609848a8a8a8a8a61206b565b60035460ff16156117f75760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b60648201526084016105d3565b6001600160a01b0384163b156117f75760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611ec09089908990889088908890600401612a83565b6020604051808303816000875af1925050508015611efb575060408051601f3d908101601f19168201909252611ef891810190612ae1565b60015b611fa757611f07612afe565b806308c379a003611f405750611f1b612b1a565b80611f265750611f42565b8060405162461bcd60e51b81526004016105d3919061224b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105d3565b6001600160e01b0319811663bc197c8160e01b14611a315760405162461bcd60e51b81526004016105d390612ba4565b60035460ff16610c3f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105d3565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061205a5761205a612863565b602090810291909101015292915050565b6001600160a01b0384163b156117f75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906120af9089908990889088908890600401612bec565b6020604051808303816000875af19250505080156120ea575060408051601f3d908101601f191682019092526120e791810190612ae1565b60015b6120f657611f07612afe565b6001600160e01b0319811663f23a6e6160e01b14611a315760405162461bcd60e51b81526004016105d390612ba4565b60035460ff1615610c3f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105d3565b80356001600160a01b038116811461218357600080fd5b919050565b6000806040838503121561219b57600080fd5b6121a48361216c565b946020939093013593505050565b6001600160e01b0319811681146107a157600080fd5b6000602082840312156121da57600080fd5b81356121e5816121b2565b9392505050565b6000602082840312156121fe57600080fd5b5035919050565b6000815180845260005b8181101561222b5760208185018101518683018201520161220f565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006121e56020830184612205565b6000806040838503121561227157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156122bc576122bc612280565b6040525050565b600067ffffffffffffffff8211156122dd576122dd612280565b5060051b60200190565b600082601f8301126122f857600080fd5b81356020612305826122c3565b6040516123128282612296565b83815260059390931b850182019282810191508684111561233257600080fd5b8286015b8481101561234d5780358352918301918301612336565b509695505050505050565b600082601f83011261236957600080fd5b813567ffffffffffffffff81111561238357612383612280565b60405161239a601f8301601f191660200182612296565b8181528460208386010111156123af57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156123e457600080fd5b6123ed8661216c565b94506123fb6020870161216c565b9350604086013567ffffffffffffffff8082111561241857600080fd5b61242489838a016122e7565b9450606088013591508082111561243a57600080fd5b61244689838a016122e7565b9350608088013591508082111561245c57600080fd5b5061246988828901612358565b9150509295509295909350565b6000806040838503121561248957600080fd5b823567ffffffffffffffff808211156124a157600080fd5b818501915085601f8301126124b557600080fd5b813560206124c2826122c3565b6040516124cf8282612296565b83815260059390931b85018201928281019150898411156124ef57600080fd5b948201945b83861015612514576125058661216c565b825294820194908201906124f4565b9650508601359250508082111561252a57600080fd5b50612537858286016122e7565b9150509250929050565b600081518084526020808501945080840160005b8381101561257157815187529582019590820190600101612555565b509495945050505050565b6020815260006121e56020830184612541565b6000602082840312156125a157600080fd5b813567ffffffffffffffff8111156125b857600080fd5b6125c484828501612358565b949350505050565b600080604083850312156125df57600080fd5b823591506125ef6020840161216c565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061263057634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561264957600080fd5b6126528361216c565b91506020830135801515811461266757600080fd5b809150509250929050565b6000806000806080858703121561268857600080fd5b843567ffffffffffffffff81111561269f57600080fd5b6126ab87828801612358565b97602087013597506040870135966060013595509350505050565b600080604083850312156126d957600080fd5b6126e28361216c565b91506125ef6020840161216c565b600080600080600060a0868803121561270857600080fd5b6127118661216c565b945061271f6020870161216c565b93506040860135925060608601359150608086013567ffffffffffffffff81111561274957600080fd5b61246988828901612358565b60006020828403121561276757600080fd5b6121e58261216c565b600181811c9082168061278457607f821691505b6020821081036127a457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601190820152701d1bdad95b9259081b9bdd08195e1a5cdd607a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156105ff576105ff6127d5565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b80820281158282048414176105ff576105ff6127d5565b634e487b7160e01b600052603260045260246000fd5b60006001820161288b5761288b6127d5565b5060010190565b818103818111156105ff576105ff6127d5565b634e487b7160e01b600052603160045260246000fd5b601f82111561290157600081815260208120601f850160051c810160208610156128e25750805b601f850160051c820191505b818110156117f7578281556001016128ee565b505050565b815167ffffffffffffffff81111561292057612920612280565b6129348161292e8454612770565b846128bb565b602080601f83116001811461296957600084156129515750858301515b600019600386901b1c1916600185901b1785556117f7565b600085815260208120601f198616915b8281101561299857888601518255948401946001909101908401612979565b50858210156129b65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000612a686040830185612541565b8281036020840152612a7a8185612541565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612aaf90830186612541565b8281036060840152612ac18186612541565b90508281036080840152612ad58185612205565b98975050505050505050565b600060208284031215612af357600080fd5b81516121e5816121b2565b600060033d1115612b175760046000803e5060005160e01c5b90565b600060443d1015612b285790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612b5857505050505090565b8285019150815181811115612b705750505050505090565b843d8701016020828501011115612b8a5750505050505090565b612b9960208286010187612296565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612c2690830184612205565b97965050505050505056fea26469706673582212204797faf5c9223df6913b6472082c70acc7e636ea12bf6d66027447035508fdc164736f6c6343000814003368747470733a2f2f6572633430342d6d6f7669652e636f6d2f6170692f746f6b656e2f",
  "deployedBytecode": "0x60806040526004361061019f5760003560e01c80635c975abb116100ec578063a25d198d1161008a578063e985e9c511610064578063e985e9c5146104c3578063f242432a1461050c578063f2fde38b1461052c578063f5068c931461054c57600080fd5b8063a25d198d14610463578063abf1b36914610483578063ce5170ca146104a357600080fd5b80637bff2fbe116100c65780637bff2fbe146103e55780638456cb59146103f85780638da5cb5b1461040d578063a22cb4651461044357600080fd5b80635c975abb146103655780635e08f3621461037d578063715018a6146103d057600080fd5b80632d3dddf11161015957806346f5303d1161013357806346f5303d146102d8578063494b09f7146102f85780634e1273f4146103185780635a9524c51461034557600080fd5b80632d3dddf1146102835780632eb2c2d6146102a35780633f4ba83a146102c357600080fd5b8062fdd58e146101ab57806301ffc9a7146101de5780630e89341c1461020e5780631c89ee451461023b5780631cf0e62c1461025d5780631d85bf031461027057600080fd5b366101a657005b600080fd5b3480156101b757600080fd5b506101cb6101c6366004612188565b61056c565b6040519081526020015b60405180910390f35b3480156101ea57600080fd5b506101fe6101f93660046121c8565b610605565b60405190151581526020016101d5565b34801561021a57600080fd5b5061022e6102293660046121ec565b610655565b6040516101d5919061224b565b34801561024757600080fd5b5061025b6102563660046121ec565b6106e9565b005b61025b61026b3660046121ec565b6107a4565b61025b61027e36600461225e565b6109a9565b34801561028f57600080fd5b5061025b61029e3660046121ec565b610b40565b3480156102af57600080fd5b5061025b6102be3660046123cc565b610be3565b3480156102cf57600080fd5b5061025b610c2f565b3480156102e457600080fd5b506101cb6102f33660046121ec565b610c41565b34801561030457600080fd5b5061025b6103133660046121ec565b610738565b34801561032457600080fd5b50610338610333366004612476565b610c81565b6040516101d5919061257c565b34801561035157600080fd5b5061025b61036036600461258f565b610dab565b34801561037157600080fd5b5060035460ff166101fe565b34801561038957600080fd5b506103c36103983660046125cc565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6040516101d5919061260e565b3480156103dc57600080fd5b5061025b610dbc565b61025b6103f336600461225e565b610dce565b34801561040457600080fd5b5061025b610e36565b34801561041957600080fd5b5060035461010090046001600160a01b03166040516001600160a01b0390911681526020016101d5565b34801561044f57600080fd5b5061025b61045e366004612636565b610e46565b34801561046f57600080fd5b5061025b61047e36600461225e565b610e55565b34801561048f57600080fd5b5061025b61049e36600461225e565b611090565b3480156104af57600080fd5b506101cb6104be366004612672565b6111f9565b3480156104cf57600080fd5b506101fe6104de3660046126c6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561051857600080fd5b5061025b6105273660046126f0565b6112aa565b34801561053857600080fd5b5061025b610547366004612755565b6112ef565b34801561055857600080fd5b5061025b61056736600461225e565b611365565b60006001600160a01b0383166105dc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061063657506001600160e01b031982166303a24d0760e21b145b806105ff57506301ffc9a760e01b6001600160e01b03198316146105ff565b60606002805461066490612770565b80601f016020809104026020016040519081016040528092919081815260200182805461069090612770565b80156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b50505050509050919050565b6000818152600760205260409020546107385760405162461bcd60e51b81526020600482015260116024820152705342542056616c7565206973207a65726f60781b60448201526064016105d3565b6000818152600560205260409020600401546001600160a01b031633146107a15760405162461bcd60e51b815260206004820152601c60248201527f596f757220617265206e6f742074686520746f6b656e206f776e65720000000060448201526064016105d3565b50565b8060045481106107c65760405162461bcd60e51b81526004016105d3906127aa565b600082815260056020526040808220815160a081019092528054829082906107ed90612770565b80601f016020809104026020016040519081016040528092919081815260200182805461081990612770565b80156108665780601f1061083b57610100808354040283529160200191610866565b820191906000526020600020905b81548152906001019060200180831161084957829003601f168201915b5050509183525050600182015460208083019190915260028301546040830152600383015460608301526004909201546001600160a01b03166080909101528101519091503410156108ef5760405162461bcd60e51b81526020600482015260126024820152710e0c2f2dacadce840dcdee840cadcdeeaced60731b60448201526064016105d3565b600083815260066020908152604080832033845290915281205460ff16600281111561091d5761091d6125f8565b146109615760405162461bcd60e51b8152602060048201526014602482015273165bdd481a185d9948189d5e481d1a194814d09560621b60448201526064016105d3565b60008381526006602090815260408083203384528252808320805460ff1916600117905585835260079091528120805434929061099f9084906127eb565b9091555050505050565b8160045481106109cb5760405162461bcd60e51b81526004016105d3906127aa565b6000838152600b602090815260408083208584529091529020546001600160a01b031615610a365760405162461bcd60e51b81526020600482015260186024820152772a37b5b2b71030b63932b0b23c903430bb329037bbb732b960411b60448201526064016105d3565b600082118015610a4857506127108211155b610aa35760405162461bcd60e51b815260206004820152602660248201527f73756220746f6b656e49642073686f756c64206265747765656e203120616e6460448201526502031303030360d41b60648201526084016105d3565b610ab1833460006001611411565b6000838152600b60209081526040808320858452825280832080546001600160a01b03191633908117909155868452600c8352818420908452825280832080546001818101835591855283852001869055868452600a9092528220805491929091610b1d9084906127eb565b90915550506000838152600860205260408120805434929061099f9084906127eb565b6001600082815260066020908152604080832033845290915290205460ff166002811115610b7057610b706125f8565b14610bbd5760405162461bcd60e51b815260206004820152601e60248201527f596f757220534254206973206e6f7420696e205041494420737461747573000060448201526064016105d3565b60009081526006602090815260408083203384529091529020805460ff19166002179055565b6001600160a01b038516331480610bff5750610bff85336104de565b610c1b5760405162461bcd60e51b81526004016105d3906127fe565b610c288585858585611614565b5050505050565b610c376117ff565b610c3f61185f565b565b600081815260056020908152604080832060030154600a909252822054610c68919061284c565b6000838152600960205260409020546105ff91906127eb565b60608151835114610ce65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105d3565b6000835167ffffffffffffffff811115610d0257610d02612280565b604051908082528060200260200182016040528015610d2b578160200160208202803683370190505b50905060005b8451811015610da357610d76858281518110610d4f57610d4f612863565b6020026020010151858381518110610d6957610d69612863565b602002602001015161056c565b828281518110610d8857610d88612863565b6020908102919091010152610d9c81612879565b9050610d31565b509392505050565b610db36117ff565b6107a1816118b1565b610dc46117ff565b610c3f60006118bd565b816004548110610df05760405162461bcd60e51b81526004016105d3906127aa565b610dfd8334846000611411565b610e1833848460405180602001604052806000815250611917565b60008381526009602052604081208054849290610b1d9084906127eb565b610e3e6117ff565b610c3f611a3a565b610e51338383611a77565b5050565b6000828152600b602090815260408083208484529091529020546001600160a01b03163314610ebe5760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b60448201526064016105d3565b6000828152600560209081526040808320600301548151928301909152918152610eed90339085908490611917565b60008381526009602052604081208054839290610f0b9084906127eb565b90915550506000838152600b60209081526040808320858452825280832080546001600160a01b0319169055858352600a9091528120805460019290610f52908490612892565b90915550506000838152600c60209081526040808320338452909152812054905b81811015610c28576000858152600c602090815260408083203384529091529020805485919083908110610fa957610fa9612863565b90600052602060002001540361107e57610fc4600183612892565b811461103f576000858152600c602090815260408083203384529091529020610fee600184612892565b81548110610ffe57610ffe612863565b6000918252602080832090910154878352600c82526040808420338552909252912080548390811061103257611032612863565b6000918252602090912001555b6000858152600c602090815260408083203384529091529020805480611067576110676128a5565b600190038181906000526020600020016000905590555b8061108881612879565b915050610f73565b6000828152600b602090815260408083208484529091529020546001600160a01b0316156110fb5760405162461bcd60e51b81526020600482015260186024820152772a37b5b2b71030b63932b0b23c903430bb329037bbb732b960411b60448201526064016105d3565b600082815260056020526040902060030154611117338461056c565b10156111655760405162461bcd60e51b815260206004820152601960248201527f596f7520646f206e6f74206861766520656e6f7567682046540000000000000060448201526064016105d3565b6000828152600560205260409020600301546111849033908490611b57565b6000828152600b60209081526040808320848452825280832080546001600160a01b03191633908117909155858452600c8352818420908452825280832080546001818101835591855283852001859055858452600a90925282208054919290916111f09084906127eb565b90915550505050565b600480546000918291908261120d83612879565b909155506040805160a081018252888152602080820189905281830188905260608201879052336080830152600084815260059091529190912081519293509091819061125a9082612906565b50602082015160018201556040820151600282015560608201516003820155608090910151600490910180546001600160a01b0319166001600160a01b0390921691909117905595945050505050565b6001600160a01b0385163314806112c657506112c685336104de565b6112e25760405162461bcd60e51b81526004016105d3906127fe565b610c288585858585611ce7565b6112f76117ff565b6001600160a01b03811661135c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d3565b6107a1816118bd565b6000828152600c602090815260408083203384529091529020546113c15760405162461bcd60e51b8152602060048201526013602482015272165bdd48191bc81b9bdd081a185d9948139195606a1b60448201526064016105d3565b80600003610e515760405162461bcd60e51b815260206004820152601960248201527f4a7573742072656d6f766520636f6d70696c65206572726f720000000000000060448201526064016105d3565b600084815260056020526040808220815160a0810190925280548290829061143890612770565b80601f016020809104026020016040519081016040528092919081815260200182805461146490612770565b80156114b15780601f10611486576101008083540402835291602001916114b1565b820191906000526020600020905b81548152906001019060200180831161149457829003601f168201915b5050509183525050600182015460208201526002820154604082015260038201546060808301919091526004909201546001600160a01b031660809091015281015190915060009083906115079061271061284c565b611511919061284c565b848360400151611521919061284c565b61152b91906127eb565b9050808510156115725760405162461bcd60e51b81526020600482015260126024820152710e0c2f2dacadce840dcdee840cadcdeeaced60731b60448201526064016105d3565b60008260600151612710611586919061284c565b9050600061159388610c41565b905060006115a38661271061284c565b6115ad88846127eb565b6115b791906127eb565b9050828111156116095760405162461bcd60e51b815260206004820152601860248201527f657863656564206d617820737570706c7920616d6f756e74000000000000000060448201526064016105d3565b505050505050505050565b81518351146116765760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105d3565b6001600160a01b03841661169c5760405162461bcd60e51b81526004016105d3906129c6565b336116ab818787878787611e14565b60005b84518110156117915760008582815181106116cb576116cb612863565b6020026020010151905060008583815181106116e9576116e9612863565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156117395760405162461bcd60e51b81526004016105d390612a0b565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906117769084906127eb565b925050819055505050508061178a90612879565b90506116ae565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117e1929190612a55565b60405180910390a46117f7818787878787611e7c565b505050505050565b6003546001600160a01b03610100909104163314610c3f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b611867611fd7565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6002610e518282612906565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166119775760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105d3565b33600061198385612020565b9050600061199085612020565b90506119a183600089858589611e14565b6000868152602081815260408083206001600160a01b038b168452909152812080548792906119d19084906127eb565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611a318360008989898961206b565b50505050505050565b611a42612126565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118943390565b816001600160a01b0316836001600160a01b031603611aea5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105d3565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038316611bb95760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016105d3565b336000611bc584612020565b90506000611bd284612020565b9050611bf283876000858560405180602001604052806000815250611e14565b6000858152602081815260408083206001600160a01b038a16845290915290205484811015611c6f5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016105d3565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611a31565b6001600160a01b038416611d0d5760405162461bcd60e51b81526004016105d3906129c6565b336000611d1985612020565b90506000611d2685612020565b9050611d36838989858589611e14565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015611d775760405162461bcd60e51b81526004016105d390612a0b565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611db49084906127eb565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611609848a8a8a8a8a61206b565b60035460ff16156117f75760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b60648201526084016105d3565b6001600160a01b0384163b156117f75760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611ec09089908990889088908890600401612a83565b6020604051808303816000875af1925050508015611efb575060408051601f3d908101601f19168201909252611ef891810190612ae1565b60015b611fa757611f07612afe565b806308c379a003611f405750611f1b612b1a565b80611f265750611f42565b8060405162461bcd60e51b81526004016105d3919061224b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105d3565b6001600160e01b0319811663bc197c8160e01b14611a315760405162461bcd60e51b81526004016105d390612ba4565b60035460ff16610c3f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105d3565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061205a5761205a612863565b602090810291909101015292915050565b6001600160a01b0384163b156117f75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906120af9089908990889088908890600401612bec565b6020604051808303816000875af19250505080156120ea575060408051601f3d908101601f191682019092526120e791810190612ae1565b60015b6120f657611f07612afe565b6001600160e01b0319811663f23a6e6160e01b14611a315760405162461bcd60e51b81526004016105d390612ba4565b60035460ff1615610c3f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105d3565b80356001600160a01b038116811461218357600080fd5b919050565b6000806040838503121561219b57600080fd5b6121a48361216c565b946020939093013593505050565b6001600160e01b0319811681146107a157600080fd5b6000602082840312156121da57600080fd5b81356121e5816121b2565b9392505050565b6000602082840312156121fe57600080fd5b5035919050565b6000815180845260005b8181101561222b5760208185018101518683018201520161220f565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006121e56020830184612205565b6000806040838503121561227157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156122bc576122bc612280565b6040525050565b600067ffffffffffffffff8211156122dd576122dd612280565b5060051b60200190565b600082601f8301126122f857600080fd5b81356020612305826122c3565b6040516123128282612296565b83815260059390931b850182019282810191508684111561233257600080fd5b8286015b8481101561234d5780358352918301918301612336565b509695505050505050565b600082601f83011261236957600080fd5b813567ffffffffffffffff81111561238357612383612280565b60405161239a601f8301601f191660200182612296565b8181528460208386010111156123af57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156123e457600080fd5b6123ed8661216c565b94506123fb6020870161216c565b9350604086013567ffffffffffffffff8082111561241857600080fd5b61242489838a016122e7565b9450606088013591508082111561243a57600080fd5b61244689838a016122e7565b9350608088013591508082111561245c57600080fd5b5061246988828901612358565b9150509295509295909350565b6000806040838503121561248957600080fd5b823567ffffffffffffffff808211156124a157600080fd5b818501915085601f8301126124b557600080fd5b813560206124c2826122c3565b6040516124cf8282612296565b83815260059390931b85018201928281019150898411156124ef57600080fd5b948201945b83861015612514576125058661216c565b825294820194908201906124f4565b9650508601359250508082111561252a57600080fd5b50612537858286016122e7565b9150509250929050565b600081518084526020808501945080840160005b8381101561257157815187529582019590820190600101612555565b509495945050505050565b6020815260006121e56020830184612541565b6000602082840312156125a157600080fd5b813567ffffffffffffffff8111156125b857600080fd5b6125c484828501612358565b949350505050565b600080604083850312156125df57600080fd5b823591506125ef6020840161216c565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061263057634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561264957600080fd5b6126528361216c565b91506020830135801515811461266757600080fd5b809150509250929050565b6000806000806080858703121561268857600080fd5b843567ffffffffffffffff81111561269f57600080fd5b6126ab87828801612358565b97602087013597506040870135966060013595509350505050565b600080604083850312156126d957600080fd5b6126e28361216c565b91506125ef6020840161216c565b600080600080600060a0868803121561270857600080fd5b6127118661216c565b945061271f6020870161216c565b93506040860135925060608601359150608086013567ffffffffffffffff81111561274957600080fd5b61246988828901612358565b60006020828403121561276757600080fd5b6121e58261216c565b600181811c9082168061278457607f821691505b6020821081036127a457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601190820152701d1bdad95b9259081b9bdd08195e1a5cdd607a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156105ff576105ff6127d5565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b80820281158282048414176105ff576105ff6127d5565b634e487b7160e01b600052603260045260246000fd5b60006001820161288b5761288b6127d5565b5060010190565b818103818111156105ff576105ff6127d5565b634e487b7160e01b600052603160045260246000fd5b601f82111561290157600081815260208120601f850160051c810160208610156128e25750805b601f850160051c820191505b818110156117f7578281556001016128ee565b505050565b815167ffffffffffffffff81111561292057612920612280565b6129348161292e8454612770565b846128bb565b602080601f83116001811461296957600084156129515750858301515b600019600386901b1c1916600185901b1785556117f7565b600085815260208120601f198616915b8281101561299857888601518255948401946001909101908401612979565b50858210156129b65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000612a686040830185612541565b8281036020840152612a7a8185612541565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612aaf90830186612541565b8281036060840152612ac18186612541565b90508281036080840152612ad58185612205565b98975050505050505050565b600060208284031215612af357600080fd5b81516121e5816121b2565b600060033d1115612b175760046000803e5060005160e01c5b90565b600060443d1015612b285790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612b5857505050505090565b8285019150815181811115612b705750505050505090565b843d8701016020828501011115612b8a5750505050505090565b612b9960208286010187612296565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612c2690830184612205565b97965050505050505056fea26469706673582212204797faf5c9223df6913b6472082c70acc7e636ea12bf6d66027447035508fdc164736f6c63430008140033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 252,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 254,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_owner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2084,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_nextTokenId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2089,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_tokenMap",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Token)2073_storage)"
      },
      {
        "astId": 2096,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_sbtStatusMap",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(SBTStatus)2077))"
      },
      {
        "astId": 2100,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_tokenSBTVault",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2104,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_tokenVault",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2108,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_tokenFTAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2112,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_tokenNFTAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2118,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_tokenNFTOwnerMap",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 2125,
        "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
        "label": "_tokenNFTOwnedMap",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(SBTStatus)2077": {
        "encoding": "inplace",
        "label": "enum SBTStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(SBTStatus)2077)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum SBTStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(SBTStatus)2077"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_enum(SBTStatus)2077))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => enum SBTStatus))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_enum(SBTStatus)2077)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_struct(Token)2073_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)2073_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Token)2073_storage": {
        "encoding": "inplace",
        "label": "struct Token",
        "members": [
          {
            "astId": 2064,
            "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2066,
            "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
            "label": "sbtPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2068,
            "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
            "label": "ftPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2070,
            "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
            "label": "ftSwapAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2072,
            "contract": "contracts/ERC404_Movie.sol:ERC404_Movie",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}